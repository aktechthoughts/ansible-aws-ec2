---
- hosts: local
  vars_files:
    - ./vars/vault.yml
    - ./vars/vars.yml
  vars:
    ansible_python_interpreter: /usr/bin/python3

  tasks:

    - name: "Local Host : Get All ec2 Details"
      ec2_instance_info:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ aws_region_id }}"
      register: ec2_metadata

    # - debug: msg="{{ ec2_metadata }}"

    - name: "Local Host : get running ec2 instance."
      set_fact:
        instance_id: "{{ item.instance_id }}"
        public_ip: "{{ item.public_ip_address }}"
      with_items: "{{ ec2_metadata.instances }}"
      when: item.state.name == 'running'

    - name: "Local Host : get stopped ec2 instance"
      set_fact:
        instance_id: "{{ item.instance_id }}"
        instance_state: "{{ item.state.name }}"
        public_ip: ''
      with_items: "{{ ec2_metadata.instances }}"
      when: item.state.name == 'stopped'

    - name: "Local Host : Restart Stopped Instance"
      ec2_instance:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        state: restarted
        instance_ids:
         - "{{ instance_id }}"
        wait: yes
        wait_timeout: 500
      register: ec2
      when: instance_state == 'stopped' 

    - name: "Local Host : set public ip for ec2 instance"
      set_fact:
        public_ip: ec2.instances[0].public_ip_address
      when: instance_state == 'stopped' 

    - name: "Local Host : Wait for ssh to come up."
      wait_for: host="{{ public_ip  }}" port=22 delay=10  timeout=300
      when: public_ip != '' 


    - debug: 
       msg="The instance {{ public_ip  }} is running."
      when: public_ip != ''  

    - name: "Local Host : End playbook if the instance restarted."
      meta: end_play
      when: public_ip != '' 

    - name: "Local Host : Create Security Group for Ansible if there is no inststance is running."
      ec2_group:
          name: "{{ aws_sg_name }}"
          description: Allow Traffic on port 22 and 80
          region: "{{ aws_region_id }}"
          aws_access_key: "{{ aws_access_key }}"
          aws_secret_key: "{{ aws_secret_key }}"
          rules:

           - proto: tcp
             from_port: 80
             to_port: 80
             cidr_ip: 0.0.0.0/0
             
           - proto: tcp
             from_port: 8080
             to_port: 8080
             cidr_ip: 0.0.0.0/0

           - proto: tcp
             from_port: 22
             to_port: 22
             cidr_ip: 0.0.0.0/0

           - proto: icmp
             from_port: -1
             to_port: -1
             cidr_ip: 0.0.0.0/0
          rules_egress:
           - proto: all
             cidr_ip: 0.0.0.0/0
          vpc_id: "{{ aws_vpc_id }}"
      when: public_ip == ''

    - name: "Local Host : Provision One EC2 instance if there is no running instance."
      ec2:
         aws_access_key: "{{ aws_access_key }}"
         aws_secret_key: "{{ aws_secret_key }}"
         key_name: "{{ aws_sec_key }}"
         region: "{{ aws_region_id }}"
         instance_type: "{{ aws_instance_type }}"
         image: "{{ aws_ami_id }}"
         wait: yes
         wait_timeout: 500
         count: 1
         instance_tags:
            Name: AWS-Ansible
         volumes:
            - device_name: /dev/xvda
              volume_type: gp2
              volume_size: 20
              delete_on_termination: true
         monitoring: yes
         vpc_subnet_id: "{{ aws_sub_id }}"
         assign_public_ip: yes
         group: Ansible_Security_Group
      register: ec2
      when: public_ip == ''

# #     # - debug: msg="{{ ec2 }}"

    - name: Wait for ssh to come up
      wait_for: host="{{ public_ip if public_ip else  ec2.instances[0].public_ip }}" port=22 delay=10  timeout=300
      
    - name: "Local Host : Add tag to The ec2 Instace"
      ec2_tag:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        resource: "{{ instance_id if instance_id else  ec2.instance_ids[0] }}" 
        region: "{{ aws_region_id }}" 
        state: "present"
      args:
        tags:
          Type: docker-machine

# #     - debug: msg="{{ public_ip if public_ip else  ec2.instances[0].public_ip }}"

    - name: "Local Host : Add ec2 as host for local ansible."
      add_host:
        name: '{{ public_ip if public_ip else  ec2.instances[0].public_ip }}'
        ansible_user: 'ubuntu'
        instance_name: 'docker-machine'
        groups : dockers


# # ## Add docker-ce on the remote host.
# # ## Run a docker image identified by default_container_image

- hosts: dockers
  remote_user: ubuntu 
  become: yes
  gather_facts: no  

  vars_files:
    - ./vars/vars.yml
  vars:
    ansible_python_interpreter: /usr/bin/python3

  pre_tasks:
   - name: "Remote Host : install python"
     raw: 'sudo apt-get -y install python3'

   - name: enable python
     shell: |
      alias python='/usr/bin/python3'

  tasks:

    # - debug: msg="{{ terminate }}"


    - name: "Remote Host : Install required system packages"
      apt: name={{ item }} state=latest update_cache=yes
      loop: [ 'apt-transport-https', 'ca-certificates', 'curl', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools', 'openjdk-9-jdk-headless']   


    - name: "Remote Host : Add Docker GPG apt Key"
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present


    - name: "Remote Host : Add Docker Repository"
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu bionic stable
        state: present

    - name: "Remote Host : Update apt and install docker-ce"
      apt: update_cache=yes name=docker-ce state=latest    

    - name: "Remote Host : Add Docker-compose Repository"
      shell: |
        curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose \
        && chmod +x /usr/local/bin/docker-compose

    - name: "Remote Host : Update apt and install docker-ce"
      apt: update_cache=yes name=docker-ce state=latest    


    - name: "Remote Host : Install Docker Module for Python"
      pip:
        name: docker   
        
    - name: "Remote Host : Pull default Docker image."
      shell: |
         docker pull "{{ default_image }}"  

    - name: Add the user 'ubuntu' to docker group.
      user:
         name: ubuntu
         comment: Add to docker group
         uid: 1000
         group: docker

    - name: "Remote Host : Run default Docker image."
      shell: |
         docker run -p 8080:8080 -t -d "{{ default_image }}"

# Terminate ec2 instance after docker is finished.

- hosts: local
  vars_files:
    - ./vars/vault.yml
    - ./vars/vars.yml
  tasks:
    - name: Terminate instances that were previously launched
      ec2:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ aws_region_id }}"
        state: 'absent'
        instance_ids: '{{ instance_id if instance_id else  ec2.instance_ids[0] }}'
      when: terminate == True  

    # - debug: msg="{{ ec2_metadata.instances[1].state }}"
    # - debug:
    #     msg: "{{ public_ip if public_ip else  instance_id }}"
